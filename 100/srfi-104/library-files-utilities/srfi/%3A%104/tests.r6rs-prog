#!r6rs  ;; Required by PLT Scheme.

;; Copyright (c) 2010 Derick Eddington
;;
;; Permission is hereby granted, free of charge, to any person obtaining a
;; copy of this software and associated documentation files (the "Software"),
;; to deal in the Software without restriction, including without limitation
;; the rights to use, copy, modify, merge, publish, distribute, sublicense,
;; and/or sell copies of the Software, and to permit persons to whom the
;; Software is furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.
;;
;; Except as contained in this notice, the name(s) of the above copyright
;; holders shall not be used in advertising or otherwise to promote the sale,
;; use or other dealings in this Software without prior written authorization.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

;; Refer to the SRFI document at:
;;   http://srfi.schemers.org/srfi-104/srfi-104.html

;; Running this program requires uncommenting the testing-only code indicated in
;; the reference implementation of (srfi :104 library-files-utilities).

(import
  (rename (rnrs (6))
          (for-all andmap))
  (srfi :39 parameters)
  (rename (srfi :78 lightweight-testing)
          (check lwt:check))
  (srfi :104 library-files-utilities))

(define-syntax check
  (syntax-rules (=>)
    ((_ e => v)
     (lwt:check e => v))
    ((_ e => v ...)
     (lwt:check (let-values ((r e)) r) => (list v ...)))))

(define-syntax check-ex
  ;; There are two clauses, to make `check' print-outs look pretty.
  (syntax-rules (=>)
    ((_ expr => pred)
     (check (check-ex expr pred) => #T))
    ((_ expr pred)
     (call/cc
       (lambda (k)
         (with-exception-handler
           (lambda (ex)
             (k (or (pred ex)
                    `(unexpected-exception:
                      ,(if (condition? ex)
                         `(conditions: . ,(simple-conditions ex))
                         ex)))))
           (lambda ()
             (let-values ((v expr))
               `(unexpected-return: . ,v)))))))))

(define (typical-ex? primary? who msg irrts)
  (lambda (x)
    (and (primary? x)
         (who-condition? x)
         (equal? who (condition-who x))
         (message-condition? x)
         (equal? msg (condition-message x))
         (irritants-condition? x)
         (equal? irrts (condition-irritants x)))))

(define (AV? who msg . irrts)
  (typical-ex? assertion-violation? who msg irrts))

(define (mock-file-exists? x) (and (member x (existing-mock-files)) #T))

(define existing-mock-files (make-parameter '()))

(define (join-and-flatten file-names)
  (apply append
         (map (lambda (x)
                (map (lambda (y)
                       (string-append
                        (car x) (string (file-name-component-separator)) y))
                     (cdr x)))
              file-names)))

(define-syntax with-mock-files
  (syntax-rules ()
    ((_ ((dir files ...) ...) . body)
     (parameterize ((test:file-exists? mock-file-exists?)
                    (existing-mock-files
                     (join-and-flatten '((dir files ...) ...))))
       . body))))

(define-syntax check-parameterized
  (syntax-rules ()
    ((_ param expr)
     (parameterize ((param expr))
       (check (param)
              => expr)))))


;; directories-from-env-var
(unless (and (directories-from-env-var)
             (positive? (length (directories-from-env-var))))
  (error (car (command-line))
         "SCHEME_LIB_PATH not set to anything"))
(check (list? (directories-from-env-var))
       => #T)
(check (andmap string?
               (directories-from-env-var))
       => #T)

;; extensions-from-env-var
(unless (and (extensions-from-env-var)
             (positive? (length (extensions-from-env-var))))
  (error (car (command-line))
         "SCHEME_LIB_EXTENSIONS not set to anything"))
(check (list? (extensions-from-env-var))
       => #T)
(check (andmap string?
               (extensions-from-env-var))
       => #T)

;; searched-directories
(let-syntax
    ((check-bad
      (syntax-rules ()
        ((_ expr)
         (check-ex (searched-directories expr)
                   => (AV? 'searched-directories
                           "not a list of non-empty strings" expr))))))
  (check-bad 'oops)
  (check-bad '(""))
  (check-bad '("foo" 'oops "bar")))
(check-parameterized searched-directories
                     '())
(check-parameterized searched-directories
                     '("a"))
(check-parameterized searched-directories
                     '("/"))
(check-parameterized searched-directories
                     (append '("/s/d/A/bar" "s/d/B/zab/asdf")
                             (directories-from-env-var)
                             '("/s/d/C" "sdd")))

;; recognized-extensions
(let-syntax
    ((check-bad
      (syntax-rules ()
        ((_ expr)
         (check-ex (recognized-extensions expr)
                   => (AV? 'recognized-extensions "not a list of valid extensions"
                           expr))))))
  (check-bad 'oops)
  (check-bad '(oops))
  (check-bad '(".ext"))
  (check-bad '("acme.ext"))
  (check-bad '("")))
(check-parameterized recognized-extensions
                     '())
(check-parameterized recognized-extensions
                     '("x"))
(check-parameterized recognized-extensions
                     (append '("acme-ext")
                             (extensions-from-env-var)
                             '("ext")))

;; file-name-component-separator
(let-syntax
    ((check-bad
      (syntax-rules ()
        ((_ expr)
         (check-ex (file-name-component-separator expr)
                   => (AV? 'file-name-component-separator
                           "not a valid character" expr))))))
  (check-bad 'oops)
  (check-bad #\#))
(check-parameterized file-name-component-separator
                     #\/)
(check-parameterized file-name-component-separator
                     #\\)


;; initialize for the rest of the test program
(searched-directories '("/s/d/A/bar" "s/d/B/zab/asdf" "/s/d/C" "sdd"))
(recognized-extensions '("acme-ext" "ext"))
(file-name-component-separator #\/)


;; library-name->file-name
(let-syntax
    ((check-bad
      (syntax-rules ()
        ((_ expr)
         (check-ex (library-name->file-name expr "ext")
                   => (AV? 'library-name->file-name "not a library name" expr))))))
  (check-bad 1)
  (check-bad '())
  (check-bad '("foo"))
  (check-bad '(1))
  (check-bad '(foo . bar))
  (check-bad '(foo bar blah asdf "zab" hoho))
  (check-bad '(foo bar (3))))
(let-syntax
    ((check-bad
      (syntax-rules ()
        ((_ expr)
         (check-ex (library-name->file-name '(foo bar) expr)
                   => (AV? 'library-name->file-name "invalid extension" expr))))))
  (check-bad 'oops)
  (check-bad ".ext")
  (check-bad "acme.ext")
  (check-bad ""))
(check (library-name->file-name '(foo) "ext")
       => "foo.ext")
(check (library-name->file-name '(foo bar) "blah")
       => "foo/bar.blah")
(check (library-name->file-name '(foo bar zab asdf) "acme-ext")
       => "foo/bar/zab/asdf.acme-ext")
(check (library-name->file-name '(\x0;\x1;\x2;\x3;\x4;\x5;\x6;\x7; \x8;\x9;\xA;\xB;\xC;\xD;\xE;\xF;\x10;\x11;\x12;\x13;\x14;\x15;\x16;\x17; \x18;\x19;\x1A;\x1B;\x1C;\x1D;\x1E;\x1F;) "ext")
       => "%0%%1%%2%%3%%4%%5%%6%%7%/%8%%9%%A%%B%%C%%D%%E%%F%%10%%11%%12%%13%%14%%15%%16%%17%/%18%%19%%1A%%1B%%1C%%1D%%1E%%1F%.ext")
(check (library-name->file-name '(<>:\x3B;\x22;/ \x5C;\x7C;?*~) "ext")
       => "%3C%%3E%%3A%%3B%%22%%2F%/%5C%%7C%%3F%%2A%%7E%.ext")
(check (library-name->file-name '(a%CE%BBb) "ext")
       => "a%25%CE%25%BBb.ext")
(check (library-name->file-name '(main) "ext")
       => "main.ext")
(check (library-name->file-name '(foo main) "ext")
       => "foo/main.ext")
(check (library-name->file-name '(foo bar.acme) "ext")
       => "foo/bar.acme.ext")
(check (library-name->file-name '(λλ ქართული 한국어) "zzxyy")
       => "λλ/ქართული/한국어.zzxyy")

;; library-file-name-info
(let-syntax
    ((check-bad
      (syntax-rules ()
        ((_ expr)
         (check-ex (library-file-name-info expr)
                   => (AV? 'library-file-name-info "not a non-empty string" expr))))))
  (check-bad 'oops)
  (check-bad ""))
(check (library-file-name-info "foo.ext")
       => '(foo) "ext")
(check (library-file-name-info "foo/bar.blah")
       => '(foo bar) "blah")
(check (library-file-name-info "foo/bar/zab/asdf.acme-ext")
       => '(foo bar zab asdf) "acme-ext")
(check (library-file-name-info "%0%%1%%2%%3%%4%%5%%6%%7%/%8%%9%%A%%B%%C%%D%%E%%F%%10%%11%%12%%13%%14%%15%%16%%17%/%18%%19%%1A%%1B%%1C%%1D%%1E%%1F%.ext")
       => '(\x0;\x1;\x2;\x3;\x4;\x5;\x6;\x7; \x8;\x9;\xA;\xB;\xC;\xD;\xE;\xF;\x10;\x11;\x12;\x13;\x14;\x15;\x16;\x17; \x18;\x19;\x1A;\x1B;\x1C;\x1D;\x1E;\x1F;) "ext")
(check (library-file-name-info "%3C%%3E%%3A%%3B%%22%%2F%/%5C%%7C%%3F%%2A%%7E%.ext")
       => '(<>:\x3B;\x22;/ \x5C;\x7C;?*~) "ext")
(check (library-file-name-info "a%25%CE%25%BBb.ext")
       => '(a%CE%BBb) "ext")
(check (library-file-name-info "main.ext")
       => '(main) "ext")
(check (library-file-name-info "foo/main.ext")
       => '(foo main) "ext")
(check (library-file-name-info "foo/bar.acme.ext")
       => '(foo bar.acme) "ext")
(check (library-file-name-info "λλ/ქართული/한국어.zzxyy")
       => '(λλ ქართული 한국어) "zzxyy")
;; searched directories are not recognized
(check (library-file-name-info "s/d/B/zab/asdf/bar.acme-ext")
       => '(s d B zab asdf bar) "acme-ext")
(check (library-file-name-info "sdd/bar/blah.ext")
       => '(sdd bar blah) "ext")
;; weird cases
(check (library-file-name-info "foo/asdf.123.0.45.ext")
       => '(foo asdf.123.0.45) "ext")
(check (library-file-name-info ".1.2.ext")
       => '(\x2E;1.2) "ext")
(check (library-file-name-info "....ext")
       => '(\x2E;\x2E;\x2E;) "ext")
;; returns #F if file name is invalid
;; malformed
(check (library-file-name-info "/")
       => #F #F)
(check (library-file-name-info "foo")
       => #F #F)
(check (library-file-name-info ".ext")
       => #F #F)
(check (library-file-name-info "foo.")
       => #F #F)
(check (library-file-name-info ".")
       => #F #F)
(check (library-file-name-info "..")
       => #F #F)
(check (library-file-name-info "....")
       => #F #F)
(check (library-file-name-info "foo.acme.")
       => #F #F)
(check (library-file-name-info "foo/bar/zab")
       => #F #F)
(check (library-file-name-info "foo/bar/.ext")
       => #F #F)
(check (library-file-name-info "foo/bar/zab.")
       => #F #F)
;; bad symbol decoding
(check (library-file-name-info "%.ext")
       => #F #F)
(check (library-file-name-info "%%.ext")
       => #F #F)
(check (library-file-name-info "%A.ext")
       => #F #F)
(check (library-file-name-info "%AF.ext")
       => #F #F)
(check (library-file-name-info "%AG%.ext")
       => #F #F)
(check (library-file-name-info "%ABCDEFGA%.ext")
       => #F #F)
(check (library-file-name-info "%AF%%.ext")
       => #F #F)
(check (library-file-name-info "%AF%%%.ext")
       => #F #F)
(check (library-file-name-info "%AF%%B.ext")
       => #F #F)
(check (library-file-name-info "%AF%%12Z%.ext")
       => #F #F)
(check (library-file-name-info "foo/bar%2E%%zab.ext")
       => #F #F)
;; set of encoded characters does matter for decoding
(check (library-file-name-info "\x3;.ext")
       => #F #F)
(check (library-file-name-info "fo:o.ext")
       => #F #F)
(check (library-file-name-info "fo*o.ext")
       => #F #F)
(check (library-file-name-info "%61%.ext")
       => #F #F)
(check (library-file-name-info "foo/%305D%%308C%.ext")
       => #F #F)
;; hex digits' case does matter for decoding
(check (library-file-name-info "%3a%.ext")
       => #F #F)
(check (library-file-name-info "foo%5C%%7C%%3F%%2A%%7e%bar.ext")
       => #F #F)
;; amount of digits does matter for decoding
(check (library-file-name-info "%03A%.ext")
       => #F #F)
(check (library-file-name-info "%00%.ext")
       => #F #F)

;; find-library-file-names
(let-syntax
    ((check-bad
      (syntax-rules ()
        ((_ expr)
         (check-ex (find-library-file-names expr)
                   => (AV? 'find-library-file-names "not a library name" expr))))))
  (check-bad 1)
  (check-bad '())
  (check-bad '("foo"))
  (check-bad '(1))
  (check-bad '(foo . bar))
  (check-bad '(foo bar blah asdf "zab" hoho))
  (check-bad '(foo bar (3))))
(with-mock-files
    (("/s/d/A/bar"
      "asdf" "zab.nope-ext" "foo.png" "foo.ext")
     ("/s/d/A/bar/asdf"
      "fdsa.blah" "fdsa.ext")
     ("s/d/B/zab/asdf"
      "bar" "foo.acme-ext" "baz.acme-ext")
     ("s/d/B/zab/asdf/bar"
      "foo-1.ext" "foo.ext")
     ("/s/d/C"
      "bar" "zab" "zab.png" "zab.ext" "zab.acme-ext")
     ("/s/d/C/bar"
      "foo")
     ("/s/d/C/bar/foo"
      "zab" "zab.xyz")
     ("/s/d/C/bar/foo/zab"
      "main.ext")
     ("/s/d/C/zab"
      "foo.png" "main.ss")
     ("sdd"
      "blah" "blah.ext" "zab.ext"
      "adbmal.nope-ext" "adbmal.abc")
     ("sdd/blah"
      "main.ext" "main.acme-ext"))
  ;; searched directory precedence
  ;; extension precedence
  (check (find-library-file-names '(foo))
         => '(("/s/d/A/bar" "foo.ext")
              ("s/d/B/zab/asdf" "foo.acme-ext")))
  (check (find-library-file-names '(zab))
         => '(("/s/d/C" "zab.acme-ext" "zab.ext")
              ("sdd" "zab.ext")))
  (check (find-library-file-names '(blah))
         => '(("sdd" "blah.ext")))
  (check (find-library-file-names '(blah main))
         => '(("sdd" "blah/main.acme-ext" "blah/main.ext")))
  (check (find-library-file-names '(bar foo))
         => '(("s/d/B/zab/asdf" "bar/foo.ext")))
  (check (find-library-file-names '(asdf fdsa))
         => '(("/s/d/A/bar" "asdf/fdsa.ext")))
  ;; return #F if no matching file found
  (check (find-library-file-names '(abcdefg))
         => #F)
  (check (find-library-file-names '(a b c d e f g))
         => #F)
  (check (find-library-file-names '(adbmal))
         => #F)
  (check (find-library-file-names '(bar foo zab))
         => #F))
(with-mock-files
    (("sdd/foo/bar/zab"
      "blah.ext" "nope.ext" "blah.acme-ext" "blah.nope-ext"
      "blah.hehe" "blah.hoho")
     ("/s/d/C/foo/bar/zab"
      "blah.hehe" "nope.ext" "blah.hoho" "nope.acme-ext")
     ("/s/d/A/bar/foo/bar"
      "zab" "asdf.ext" "foo.png")
     ("s/d/B/zab/asdf/foo/bar/zab"
      "blah.nope-ext" "blah.ext"))
  (parameterize ((recognized-extensions '("hoho" "acme-ext" "ext" "hehe")))
    (check (find-library-file-names '(foo bar zab blah))
           => '(("s/d/B/zab/asdf" "foo/bar/zab/blah.ext")
                ("/s/d/C" "foo/bar/zab/blah.hoho" "foo/bar/zab/blah.hehe")
                ("sdd" "foo/bar/zab/blah.hoho" "foo/bar/zab/blah.acme-ext"
                       "foo/bar/zab/blah.ext" "foo/bar/zab/blah.hehe")))))
;; encoding does matter for searching
(with-mock-files (("sdd" "a%25%b%2f%c%3C%d%3a%e%2A%f.ext"
                         "a%25%b%2F%c%3c%d%3A%e%2a%f.ext"))
  (check (find-library-file-names '(a%b/c<d:e*f))
         => #F))
(with-mock-files (("sdd/zab.asdf" "blah.ext")
                  ("sdd/zab%2E%asdf" "blah.ext"))
  (check (find-library-file-names '(zab.asdf blah))
         => '(("sdd" "zab.asdf/blah.ext"))))


;; searched-directories
(with-mock-files (("foo/bar" "zab.ext")
                  ("/asdf/blah" "zab.ext"))
  (parameterize ((searched-directories '("foo/bar" "/asdf/blah")))
    (check (find-library-file-names '(zab))
           => '(("foo/bar" "zab.ext")
                ("/asdf/blah" "zab.ext"))))
  (parameterize ((searched-directories '("/asdf/blah" "foo/bar")))
    (check (find-library-file-names '(zab))
           => '(("/asdf/blah" "zab.ext")
                ("foo/bar" "zab.ext")))))

;; recognized-extensions
(parameterize ((recognized-extensions '("xyz" "asdf")))
  (check (library-name->file-name '(foo bar zab) "abc")
         => "foo/bar/zab.abc")
  (check (library-file-name-info "foo/bar/zab.asdf")
         => '(foo bar zab) "asdf")
  (check (library-file-name-info "foo/bar/zab.ext")
         => '(foo bar zab) "ext")
  (with-mock-files (("/s/d/C/blah" "hoho.ext" "hoho.asdf" "hoho.xyz"))
    (check (find-library-file-names '(blah hoho))
           => '(("/s/d/C" "blah/hoho.xyz" "blah/hoho.asdf")))
    (parameterize ((recognized-extensions '("asdf" "xyz")))
      (check (find-library-file-names '(blah hoho))
             => '(("/s/d/C" "blah/hoho.asdf" "blah/hoho.xyz"))))))

;; file-name-component-separator
(parameterize ((file-name-component-separator #\\))
  (check (library-name->file-name '(foo bar zab) "ext")
         => "foo\\bar\\zab.ext")
  (check (library-file-name-info "foo\\bar\\zab.ext")
         => '(foo bar zab) "ext")
  (check (library-file-name-info "foo/bar.ext")
         => #F #F))


(check-report)
