#!r6rs  ;; Required by PLT Scheme.

;; Copyright (c) 2010 Derick Eddington
;;
;; Permission is hereby granted, free of charge, to any person obtaining a
;; copy of this software and associated documentation files (the "Software"),
;; to deal in the Software without restriction, including without limitation
;; the rights to use, copy, modify, merge, publish, distribute, sublicense,
;; and/or sell copies of the Software, and to permit persons to whom the
;; Software is furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.
;;
;; Except as contained in this notice, the name(s) of the above copyright
;; holders shall not be used in advertising or otherwise to promote the sale,
;; use or other dealings in this Software without prior written authorization.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

;; Refer to the SRFI document at:
;;   http://srfi.schemers.org/srfi-104/srfi-104.html

;; If a Scheme system desires to make this library built-in, an import indicated
;; below and an expression indicated at the bottom of this library should be
;; commented-out, and the initialization of this library should be done directly
;; in this library.

(library (srfi :104 library-files-utilities)
  (export
    searched-directories
    recognized-extensions
    file-name-component-separator
    directories-from-env-var
    extensions-from-env-var
    library-name->file-name
    library-file-name-info
    find-library-file-names
    ;; Needed by the benchmark program.
    #;fold-find-library-file-names
    ;; Needed by the test program.
    #;test:file-exists?)
  (import
    (rename (rnrs base (6))
            (assertion-violation AV))
    (only (rnrs control (6))
          unless)
    (rename (rnrs lists (6))
            (for-all andmap))
    (prefix (only (rnrs files (6))
                  file-exists?)
            rnrs:)
    (only (srfi :39 parameters)
          make-parameter)
    (only (srfi :98 os-environment-variables)
          get-environment-variable)
    ;; The next import is needed only when this library is not built-in,
    ;; i.e. when this library is externally imported.  If this library is
    ;; built-in, the next import should be commented-out.
    (srfi :104 library-files-utilities initialize))

  ;;----------------------------------------------------------------------------

  ;; Uncomment for the test program.
  #;(define test:file-exists? (make-parameter #F))

  (define (file-exists? x)
    ;; Comment-out for the test program.
    (rnrs:file-exists? x)
    ;; Uncomment for the test program.
    #;((test:file-exists?) x))

  ;;----------------------------------------------------------------------------

  (define (non-empty-string? x)
    (and (string? x) (positive? (string-length x))))

  (define (non-empty-list? x) (and (list? x) (pair? x)))

  (define (last x) (car (reverse x)))

  (define (no-last x) (reverse (cdr (reverse x))))

  (define (string-intersperse sl c)
    (define (intersperse l x)
      (let loop ((l l) (a '()))
        (if (null? l)
          (if (null? a) '() (reverse (cdr a)))
          (loop (cdr l) (cons* x (car l) a)))))
    (apply string-append (intersperse sl (string c))))

  (define (file-name-join . fns)
    (string-intersperse (filter (lambda (x) (positive? (string-length x)))
                                fns)
                        (file-name-component-separator)))

  (define (string-split s c)
    (if (string=? "" s)
      '()
      (let loop ((l (reverse (string->list s))) (g '()) (a '()))
        (if (null? l)
          (cons (list->string g) a)
          (if (char=? (car l) c)
            (loop (cdr l) '() (cons (list->string g) a))
            (loop (cdr l) (cons (car l) g) a))))))

  (define (file-name-split fn)
    (filter (lambda (x) (positive? (string-length x)))
            (string-split fn (file-name-component-separator))))

  (define (from-env-var env-var)
    (lambda ()
      (let ((x (get-environment-variable env-var)))
        (and x
             (string-split x env-var-element-separator)))))

  (define (library-name? x) (and (non-empty-list? x) (andmap symbol? x)))

  (define (extension? x)
    (and (non-empty-string? x)
         (not (memv extension-separator (string->list x)))))

  ;;----------------------------------------------------------------------------

  (define env-var-element-separator #\:)

  (define encoded-delim #\%)

  (define extension-separator #\.)

  (define-syntax define-parameter
    (syntax-rules ()
      ((_ name init pred msg)
       (define name
         (make-parameter init
          (lambda (x) (if (pred x) x (AV 'name msg x))))))))

  (define-parameter searched-directories '()
    (lambda (x) (and (list? x) (andmap non-empty-string? x)))
    "not a list of non-empty strings")

  (define-parameter recognized-extensions '()
    (lambda (x) (and (list? x) (andmap extension? x)))
    "not a list of valid extensions")

  (define-parameter file-name-component-separator #\/
    (lambda (x) (memv x '(#\/ #\\)))
    "not a valid character")

  (define (initialize! fn-sep ev-sep s-dirs exts)
    (file-name-component-separator fn-sep)
    (set! env-var-element-separator ev-sep)
    (searched-directories s-dirs)
    (recognized-extensions exts))

  ;;----------------------------------------------------------------------------

  (define (encode-char? i)
    ;; Optimized version of:
    ;;   (or (char<=? #\x0 c #\x1F)
    ;;       (memv c '(#\" #\% #\* #\/ #\: #\; #\< #\> #\? #\\ #\| #\~)))
    (and (< i #x7F)
         (vector-ref
          '#(#T #T #T #T #T #T #T #T #T #T #T #T #T #T #T #T
             #T #T #T #T #T #T #T #T #T #T #T #T #T #T #T #T
             #F #F #T #F #F #T #F #F #F #F #T #F #F #F #F #T
             #F #F #F #F #F #F #F #F #F #F #T #T #T #F #T #T
             #F #F #F #F #F #F #F #F #F #F #F #F #F #F #F #F
             #F #F #F #F #F #F #F #F #F #F #F #F #T #F #F #F
             #F #F #F #F #F #F #F #F #F #F #F #F #F #F #F #F
             #F #F #F #F #F #F #F #F #F #F #F #F #T #F #T)
          i)))

  (define (encode-string s)
    ;; Optimized for the common case of no characters to encode.
    (define (hex n)
      (vector-ref '#(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9
                     #\A #\B #\C #\D #\E #\F)
                  n))
    (let loop-s ((s (string->list s)) (a '()) (same s))
      (if (pair? s)
        (let* ((c (car s))
               (i (char->integer c)))
          (if (encode-char? i)
            (let loop-i ((i i) (h '()))
              (let-values (((d m) (div-and-mod i 16)))
                (let ((h (cons (hex m) h)))
                  (if (positive? d)
                    (loop-i d h)
                    (loop-s (cdr s)
                            (cons encoded-delim
                                  (fold-left (lambda (a x) (cons x a))
                                             (cons encoded-delim a)
                                             h))
                            #F)))))
            (loop-s (cdr s) (cons c a) same)))
        (or same
            (list->string (reverse a))))))

  (define (decode-string s)
    ;; Optimized for the common case of no encoded characters.
    (define (hex? c) (or (char<=? #\0 c #\9) (char<=? #\A c #\F)))
    (define (hex->num h) (string->number (apply string h) 16))
    (let loop-s ((s (string->list s)) (a '()) (same s))
      (if (pair? s)
        (let ((c (car s)))
          (if (char=? encoded-delim c)
            (let loop-h ((s (cdr s)) (h '()))
              (and (pair? s)
                   (let ((c (car s)))
                     (if (char=? encoded-delim c)
                       (and (pair? h)
                            (let* ((h (reverse h))
                                   (i (hex->num h)))
                              (and (encode-char? i)
                                   (or (not (char=? #\0 (car h)))
                                       (null? (cdr h)))
                                   (loop-s (cdr s)
                                           (cons (integer->char i) a)
                                           #F))))
                       (and (hex? c)
                            (loop-h (cdr s) (cons c h)))))))
            (and (not (encode-char? (char->integer c)))
                 (loop-s (cdr s) (cons c a) same))))
        (or same
            (list->string (reverse a))))))

  ;;----------------------------------------------------------------------------

  (define directories-from-env-var (from-env-var "SCHEME_LIB_PATH"))

  (define extensions-from-env-var (from-env-var "SCHEME_LIB_EXTENSIONS"))

  (define (library-name->file-name ln extension)
    (unless (library-name? ln)
      (AV 'library-name->file-name "not a library name" ln))
    (unless (extension? extension)
      (AV 'library-name->file-name "invalid extension" extension))
    (let ((encs (map (lambda (x) (encode-string (symbol->string x)))
                     ln)))
      (string-append (apply file-name-join encs)
                     (string extension-separator)
                     extension)))

  (define (library-file-name-info lfn)
    (unless (non-empty-string? lfn)
      (AV 'library-file-name-info "not a non-empty string" lfn))
    (let ((lfn (file-name-split lfn)))
      (if (pair? lfn)
        (let* ((parts (string-split (last lfn) extension-separator))
               (pre (string-intersperse (no-last parts) extension-separator))
               (ext (last parts))
               (ln (and (positive? (string-length pre))
                        (positive? (string-length ext))
                        (let* ((encs (append (no-last lfn) (list pre)))
                               (strs (map decode-string encs)))
                          (and (andmap values strs)
                               (map string->symbol strs))))))
          (values ln (and ln ext)))
        (values #F #F))))

  ;; Note: fold-find-library-file-names can be used by Scheme systems using this
  ;; library to implement SRFI 103, to more effeciently find the first matching
  ;; library file, instead of using find-library-file-names.

  (define (fold-find-library-file-names lib-name proc . seeds)
    (let* ((encs (map (lambda (x) (encode-string (symbol->string x)))
                      lib-name))
           (fn (string-append (apply file-name-join encs)
                              (string extension-separator))))
      (let loop-s ((sds (searched-directories)) (seeds seeds))
        (if (pair? sds)
          (let ((sd (car sds)))
            (let loop-e ((exts (recognized-extensions)) (seeds seeds))
              (if (pair? exts)
                (let ((fn (string-append fn (car exts))))
                  (if (file-exists? (file-name-join sd fn))
                    (let-values (((cont . seeds) (apply proc sd fn seeds)))
                      (if cont
                        (loop-e (cdr exts) seeds)
                        (apply values seeds)))
                    (loop-e (cdr exts) seeds)))
                (loop-s (cdr sds) seeds))))
          (apply values seeds)))))

  (define (find-library-file-names lib-name)
    (unless (library-name? lib-name)
      (AV 'find-library-file-names "not a library name" lib-name))
    (let-values (((_ accum)
                  (fold-find-library-file-names
                   lib-name
                   (lambda (searched-dir file-name prev-sd accum)
                     (values #T
                             searched-dir
                             (if (eq? prev-sd searched-dir)
                               (cons (cons file-name (car accum))
                                     (cdr accum))
                               (cons (list file-name searched-dir)
                                     accum))))
                   #F '())))
      (and (pair? accum)
           (fold-left (lambda (a x) (cons (reverse x) a))
                      '() accum))))

  ;;----------------------------------------------------------------------------

  ;; Note this library invocation side-effect.

  ;; The next expression is needed only when this library is not built-in,
  ;; i.e. when this library is externally imported.  If this library is
  ;; built-in, the next expression should be commented-out.
  (initialize-for-system initialize!)
)
