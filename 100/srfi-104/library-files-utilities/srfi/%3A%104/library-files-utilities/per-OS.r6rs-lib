#!r6rs  ;; Required by PLT Scheme.

;; Copyright (c) 2010 Derick Eddington
;;
;; Permission is hereby granted, free of charge, to any person obtaining a
;; copy of this software and associated documentation files (the "Software"),
;; to deal in the Software without restriction, including without limitation
;; the rights to use, copy, modify, merge, publish, distribute, sublicense,
;; and/or sell copies of the Software, and to permit persons to whom the
;; Software is furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.
;;
;; Except as contained in this notice, the name(s) of the above copyright
;; holders shall not be used in advertising or otherwise to promote the sale,
;; use or other dealings in this Software without prior written authorization.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

(library (srfi :104 library-files-utilities per-OS)
  (export
    identify-OS
    param-vals-for-OS)
  (import
    (rnrs base (6))
    (only (rnrs lists (6))
          assp)
    (only (rnrs unicode (6))
          string-ci=?))

  (define (identify-OS OS-str OS-alist)
    (define OS-str-len (string-length OS-str))
    (define (OS-str-contains? str)
      (define str-len (string-length str))
      (let loop ((i 0))
        (and (<= (+ i str-len) OS-str-len)
             (or (string-ci=? str (substring OS-str i (+ i str-len)))
                 (loop (+ 1 i))))))
    (cond
      ((assp OS-str-contains? OS-alist)
       => cdr)
      (else
       (error 'identify-OS "unable to identify OS" OS-str))))

  (define (param-vals-for-OS OS)
    ;; TODO: Is this all correct and as complete as it should be?
    (case OS
      ((linux solaris bsd darwin cygwin)
       (values
        ;; file-name-component-separator
        #\/
        ;; environment-variable element separator
        #\:))
      ((windows)
       (values
        ;; file-name-component-separator
        #\\
        ;; environment-variable element separator
        #\;))
      (else
       (assertion-violation 'param-vals-for-OS "unknown OS" OS))))
)
