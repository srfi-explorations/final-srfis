Title

Formatting (Converting All Types of Object to A String)

Author

Joo ChurlSoo

Abstract

This SRFI introduces the CAT procedure that converts any object to a string.
It takes one object as the first argument and accepts a variable number of
optional arguments, unlike the procedure called FORMAT.

Rationale

It is difficult to gain a complete consensus for the design of a generic
formatting procedure that performs a variety of necessary functions in
addition to essential functions provided in C's PRINTF and Common lisp's
FORMAT.  One of such ways would be to devise a free (and/or floating) sequence
method that easily handles optional arguments, in contrast to the conventional
fixed sequence method, in order to obtain a handy optional and functional
interface.  With the concept of free sequencing, the CAT procedure is then
defined, not to process optional arguments with default values, but to process
default values with optional arguments.

Issues

In converting a number to a string, it has not been tried to uniformly express
the exactness of a number in all implementations as each implementation
supports a varying degree of numerical types in R5RS.  The CAT procedure makes
it possible for the user to prefix exact sign to the resulting string as well
as not to prefix it to the resulting string as conventionally used, when an
exact number is made to have a decimal point, or an inexact number is
converted to an exact number that has a decimal point.

Specification

(CAT <object> [<exactness%>] [<radix%>] [<precision%>] [<sign%>] [<separator%>]
	      [<writer$>] [<pipe$>] [<take$>]
	      [<converter*>] [<char*>] [<width*>] [<port*>] [<string*>] ...)

     * <suffix%>: effective only for the number type of <object>.
       <suffix$>: effective for all types except the number type of <object>.
       <suffix*>: effective for all types of <object>.
     * <object> is any scheme object.
     * <exactness> is a symbol: exact or inexact.
     * <radix> is a symbol: binary, decimal, octal, or hexadecimal.
       The default value is decimal.
     * <precision> is an inexact integer whose absolute value specifies the
       number of decimal digits after a decimal point.  If <precision> is
       a non-negative integer, an exact sign (#e) is prefixed to the resulting
       string as needed.
     * If <sign> is a symbol that takes the form of 'sign, and <object> is a
       positive number without a positive sign, the positive sign is prefixed
       to the resulting string.
     * <separator> is a list whose first element is a character serving as a
       separator and second element is a positive exact integer.  If the
       integer is n, the resulting string is separated in every n-characters
       of the resulting string.  When the integer is omitted, the default
       value is 3.
     * <writer> is a procedure of two arguments; <object> and a string port.
       It writes <object> to the string port.  The default value of <writer>
       is varied according to the type of <object>.  When <object> is a
       self-evaluating constant, it becomes equivalent to DISPLAY procedure,
       otherwise, it becomes WRITE procedure.  If you want any objects to
       be displayed in your own way, you have to define your own <writer>.
       Otherwise, they are displayed simply in their evaluated forms.
     * <pipe> is a list which is composed of one or more procedures.  Each
       procedure takes at least one string argument and returns a string.  One
       procedure connects with another as a pipe.
     * <take> is a list whose elements are two exact integers; n and m, and
       the absolute values of n and m are N and M, respectively.
       First, the resulting string takes from the left n-characters, if it is
       non-negative, or all the characters but N-characters, if negative.
       Second, it takes from the right m-characters, if it is non-negative, or
       all the characters but M-characters, if negative.  Then, it
       concatenates two set of characters taken.  The second element can be
       omitted.  If omitted, the default value is 0.
     * <converter> is a pair whose car value is a predicate procedure that
       checks whether <object> satisfies it, and cdr value is a procedure that
       takes the <object> as the first argument with or without a variable
       number of optional arguments and returns a string.  When <object>
       satisfies the predicate procedure, all optional arguments are
       ineffective except <char>, <width>, <port>, and <string>.
     * <char> is a padding character.  The default value is #\space.
     * <width> is an exact integer whose absolute value specifies the width of
       the resulting string.  When the resulting string has fewer characters
       than the absolute value of <width>, it is placed rightmost with the
       rest being padded with <char>s, if <width> is positive, or it is placed
       leftmost with the rest being padded with <char>s, if <width> is
       negative.  On the other hand, when the resulting string has more
       characters than the absolute value of <width>, the <width> is ignored.
       The default value is 0.
     * <port> is an output port or a boolean. If an output port is specified,
       the resulting string and <string>s are output into that port and
       simultaneously returned as a string.  If <port> is #t, the output port
       is current output port.  If <port> is #f, the output is only returned
       as a string.  The default value is #f.
     * <string> is a string that is appended to the resulting string.

The order of all optional arguments does not matter.  The CAT procedure
processes optional arguments in the following order; <converter>, <exactness>,
<radix>, <precision>, <sign>, <separator>, <char>, <width>, <string>, <port>
for the number type of <object>, or in the following order; <converter>,
<writer>, <pipe>, <take>, <char>, <width>, <string>, <port> for all other
types.

Examples

(cat 129.995 -10 2.)				"130.00    "
(cat 129.995 10 2.)				"    130.00"
(cat 129.995 2. 'exact)				"#e130.00"
(cat 129 -2.)					"129.00"
(cat 129 2.)					"#e129.00"
(cat 129 10 2. #\0)				"#e00129.00"
(cat 129 10 2. #\9 'sign)			"#e+9129.00"
(cat 129 10 2. #\* 'sign)			"*#e+129.00"
(cat 1/3)					"1/3"
(cat 1/3 10 2.)					"    #e0.33"
(cat 1/3 10 -2.)				"      0.33"
(cat 129.995 10 '(#\, 2))			" 1,29.99,5"
(cat 129995 10 '(#\,) 'sign)			"  +129,995"
(cat (cat 129.995 0.) '(0 -1))			"130"
(cat 99.5 10 'sign 'octal 'exact)		"    +307/2"
(cat (sqrt -5) 10 2.)				"0.00+2.24i"
(cat 3.14159e12 10 2. 'sign)			"  +3.14e12"
(cat #x123 'octal 'sign)			"+443"
(cat "#o" (cat #x123 'octal 'sign))		"#o+443"
(cat #x123 -10 2. 'sign #\*)			"#e+291.00*"
(cat "string" -10)				"string    "
(cat "string" 10 (list string-upcase))		"    STRING"
(cat "string" 10 (list string-upcase) '(-2))    "      RING"
(cat "string" 10 `(,string-titlecase) '(2 3))	"     Sting"
(cat "string" `(,string-reverse ,string-upcase))"GNIRTS"
(cat #\a 10)					"         a"
(cat 'symbol 10)				"    symbol"
(cat '#(#\a "str" s))				"#(#\\a \"str\" s)"
(cat '(#\a "str" s))				"(#\\a \"str\" s)"
(cat '(#\a "str" s) #t)				(#\a "str" s)"(#\\a \"str\" s)"
(cat '(#\a "str" s) (current-output-port))	(#\a "str" s)"(#\\a \"str\" s)"
(cat 3 (cat 's) " " (cat "str" write))		"3s \"str\""
(cat 3 #t (cat 's) " " (cat "str" write))	3s "str""3s \"str\""
(cat 3 #t (cat 's #t) " " (cat "str" write))	s3s "str""3s \"str\""
 
(define-record-type :example
    (make-example num str)
    example?
    (num get-num set-num!)
    (str get-str set-str!))
(define ex (make-example 123 "string"))
(define (record->string object)
  (cat (get-num object) "-" (get-str object)))
(define (record-writer object string-port)
    (if (example? object)
	(begin (display (get-num object) string-port)
	       (display "-" string-port)
	       (display (get-str object) string-port))
	((or (and (or (string? object)
		      (char? object)
		      (boolean? object))
		  display)
	     write) object string-port))) 
ex						'#{:example}
(cat ex)					"#{:example}"
(cat ex 20 record-writer)			"          123-string"
(cat ex 20 record-writer
     `(,(cut string-delete char-set:digit <>)
       ,string-upcase ,string-reverse)
     '(0 -1) #\-)				"--------------GNIRTS"
(cat "string" 20 record-writer
     (list string-upcase) '(2 3) #\-)		"---------------STING"
(cat 12 20 record-writer 3.)			"            #e12.000"
(cat ex 20 (cons example? record->string))	"          123-string"
(cat ex 20 (cons example? record->string)
     `(,(cut string-delete char-set:digit <>)
       ,string-upcase ,string-reverse)
     '(0 -1) #\-)				"----------123-string"
(cat "string" 20 (cons example? record->string)
     (list string-upcase) '(2 3) #\-)		"---------------STING"
(cat 12 20 (cons example? record->string) -3.)	"              12.000"

Implementation

The implementation below requires SRFI-1 (List library), SRFI-6 (Basic string
ports), SRFI-8 (Receive), SRFI-13 (String library), and SRFI-23 (Error
reporting mechanism).

;; The OPT-VALUES is a part of the REST-VALUES in SRFI-51 (Handling rest list).
(define (opt-values rest . default)
  (let loop ((rest-list rest)
	     (default-list default)
	     (result '()))
    (if (null? default-list)
	(if (null? rest-list)
	    (apply values (reverse result))
	    (error "cat: bad argument" rest-list))
	(if (null? rest-list)
	    (apply values (append (reverse result) (map car default-list)))
	    (let ((default (car default-list)))
	      (let lp ((rest rest-list)
		       (head '()))
		(if (null? rest)
		    (loop (reverse head)
			  (cdr default-list)
			  (cons (car default) result))
		    (if (list? default)
			(if (member (car rest) default)
			    (loop (append (reverse head) (cdr rest))
				  (cdr default-list)
				  (cons (car rest) result))
			    (lp (cdr rest) (cons (car rest) head)))
			(if ((cdr default) (car rest))
			    (loop (append (reverse head) (cdr rest))
				  (cdr default-list)
				  (cons (car rest) result))
			    (lp (cdr rest) (cons (car rest) head)))))))))))

(define (cat object . rest)
  (receive (str-list rest-list) (partition string? rest)
    (receive (width port char converter precision sign exactness radix
	      separator writer pipe take)
	(opt-values rest-list
		    (cons 0 (lambda (x) (and (integer? x) (exact? x))))
		    (cons #f (lambda (x) (or (boolean? x) (output-port? x))))
		    (cons #\space char?)
		    (cons #f (lambda (x)
			       (and (pair? x)
				    (procedure? (car x))
				    (procedure? (cdr x)))))
		    (cons #f (lambda (x) (and (integer? x) (inexact? x))))
		    (cons #f (lambda (x) (eq? x 'sign)))
		    (cons #f (lambda (x) (memq x '(exact inexact))))
		    (list 'decimal 'binary 'octal 'hexadecimal)
		    (cons #f (lambda (x)
			       (and (list? x)
				    (< 0 (length x) 3)
				    (char? (car x))
				    (or (null? (cdr x))
					(and (integer? (cadr x))
					     (exact? (cadr x))
					     (< 0 (cadr x)))))))
		    (cons #f procedure?)
		    (cons #f (lambda (x)
			       (and (list? x)
				    (not (null? x))
				    (every procedure? x))))
		    (cons #f (lambda (x)
			       (and (list? x)
				    (< 0 (length x) 3)
				    (every (lambda (x)
					     (and (integer? x) (exact? x)))
					   x)))))
      (let ((port (if (eq? port #t) (current-output-port) port))
	    (str
	     (apply
	      string-append
	      (cond
	       ((and converter
		     ((car converter) object))
		(let* ((str ((cdr converter) object))
		       (pad (- (abs width) (string-length str))))
		  (cond
		   ((<= pad 0) str)
		   ((< 0 width) (string-append (make-string pad char) str))
		   (else (string-append str (make-string pad char))))))
	       ((number? object)
		(and (memq radix '(binary octal hexadecimal))
		     (or precision
			 (and (inexact? object)
			      (not (eq? exactness 'exact)))
			 (eq? exactness 'inexact))
		     (error "cat: non-decimal cannot have a decimal point"
			    radix))
		(and precision
		     (< precision 0)
		     (eq? exactness 'exact)
		     (error " cat: exact number cannot have a decimal point without exact sign"
			    precision))
		(let* ((exact-sign (and precision
					(<= 0 precision)
					(or (eq? exactness 'exact)
					    (and (exact? object)
						 (not (eq? exactness
							   'inexact))))))
		       (str (number->string
			     (if (or (not precision) (<= 0 precision))
				 (if exact-sign
				     (if (exact? object)
					 (exact->inexact object) object)
				     (if exactness
					 (if (eq? exactness 'exact)
					     (if (inexact? object)
						 (inexact->exact object)
						 object)
					     (if (exact? object)
						 (exact->inexact object)
						 object))
					 object))
				 (if exactness
				     (if (eq? exactness 'exact)
					 (if (inexact? object)
					     (inexact->exact object) object)
					 (if (exact? object)
					     (exact->inexact object) object))
				     (if (and precision (exact? object))
					 (exact->inexact object) object)))
			     (cdr (assq radix
					'((decimal . 10) (binary . 2)
					  (octal . 8) (hexadecimal . 16))))))
		       (str
			(if precision
			    (let ((precision (inexact->exact (abs precision)))
				  (e-index (or (string-index str #\e)
					       (string-index str #\E)))
				  (s-index (or (string-index str #\+ 1)
					       (string-index str #\- 1))))
			      (define (mold str pre)
				(let ((len (string-length str))
				      (ind (string-index str #\.)))
				  (if ind
				      (let ((d-len (- len (+ ind 1))))
					(if (<= d-len pre)
					    (string-append
					     str
					     (make-string (- pre d-len) #\0))
					    (mold
					     (number->string
					      (let ((num
						     (string->number
						      (substring
						       str 0
						       (+ (if (= pre 0) 0 1)
							  ind pre)))))
						((if (< num 0) - +)
						 num
						 (if (< 4
							(string->number
							 (string
							  (string-ref
							   str
							   (+ 1 ind pre)))))
						     (expt 0.1 pre) 0))))
					     pre)))
				      (string-append str "."
						     (make-string pre #\0)))))
			      (cond
			       (e-index
				(string-append
				 (mold (substring str 0 e-index) precision)
				 (substring str e-index (string-length str))))
			       (s-index
				(string-append
				 (mold (substring str 0 s-index) precision)
				 (string (string-ref str s-index))
				 (mold (substring str (+ 1 s-index)
						  (- (string-length str) 1))
				       precision)
				 (string (string-ref str
						     (- (string-length str)
							1)))))
			       (else
				(mold str precision))))
			    str))
		       (str (if (and (< 0 (real-part object))
				     (not (eqv? #\+ (string-ref str 0)))
				     sign)
				(string-append "+" str) str))
		       (str (if exact-sign (string-append "#e" str) str))
		       (str
			(if (and separator
				 (not (or (string-index str #\e)
					  (string-index str #\i)
					  (string-index str #\/))))
			    (let ((sep-str (string (car separator)))
				  (sep-num (if (null? (cdr separator))
					       3 (cadr separator)))
				  (sig-str (and (or (eqv? #\-
							  (string-ref str 0))
						    (eqv? #\+
							  (string-ref str 0)))
						(string (string-ref str 0)))))
			      (define (list->alist slist n)
				(if (< (length slist) n)
				    (if (null? slist) '() (list slist))
				    (receive (n-list rest) (split-at slist n)
				      (cons n-list (list->alist rest n)))))
			      (let* ((str (if sig-str
					      (substring str
							 1 (string-length str))
					      str))
				     (dot-index (string-index str #\.))
				     (predot-str-list
				      (map reverse-list->string
					   (reverse
					    (list->alist
					     (reverse
					      (string->list
					       (if dot-index
						   (substring str 0 dot-index)
						   str)))
					     sep-num))))
				     (postdot-str-list
				      (map list->string
					   (list->alist
					    (string->list
					     (if dot-index
						 (substring str (+ 1 dot-index)
							    (string-length
							     str))
						 ""))
					    sep-num))))
				(string-append (or sig-str "")
					       (string-join predot-str-list
							    sep-str)
					       (if dot-index "." "")
					       (string-join postdot-str-list
							    sep-str))))
			    str))
		       (len (string-length str))
		       (pad (- (abs width) len)))
		  (cond
		   ((<= pad 0) str)
		   ((< 0 width)
		    (cond
		     ((and (char-numeric? char) exact-sign)
		      (if (or (eqv? #\+ (string-ref str 2))
			      (eqv? #\- (string-ref str 2)))
			  (string-append (substring str 0 3)
					 (make-string pad char)
					 (substring str 3 len))
			  (string-append (substring str 0 2)
					 (make-string pad char)
					 (substring str 2 len))))
		     ((and (char-numeric? char)
			   (or (eqv? #\+ (string-ref str 0))
			       (eqv? #\- (string-ref str 0))))
		      (string-append (substring str 0 1)
				     (make-string pad char)
				     (substring str 1 len)))
		     (else
		      (string-append (make-string pad char) str))))
		   (else (string-append str (make-string pad char))))))
	       (else
		(let* ((str (cond
			     (writer (get-output-string
				      (let ((str-port (open-output-string)))
					(writer object str-port)
					str-port)))
			     ((string? object) object)
			     ((char? object) (string object))
			     ((boolean? object) (if object "#t" "#f"))
			     (else (get-output-string
				    (let ((str-port (open-output-string)))
				      (write object str-port)
				      str-port)))))
		       (str (if pipe
				(let loop ((str ((car pipe) str))
					   (fns (cdr pipe)))
				  (if (null? fns)
				      str
				      (loop ((car fns) str) (cdr fns))))
				str))
		       (str
			(if take
			    (let ((left (car take))
				  (right (if (null? (cdr take)) 0 (cadr take)))
				  (len (string-length str)))
			      (string-append
			       (if (< left 0)
				   (string-drop str (if (< (abs left) len)
							(abs left) len))
				   (string-take str (if (< left len)
							left len)))
			       (if (< right 0)
				   (string-drop-right str (if (< (abs right)
								 len)
							      (abs right) len))
				   (string-take-right str (if (< right len)
							      right len)))))
			    str))
		       (pad (- (abs width) (string-length str))))
		  (cond
		   ((<= pad 0) str)
		   ((< 0 width) (string-append (make-string pad char) str))
		   (else (string-append str (make-string pad char)))))))
	      str-list)))
	(and port (display str port))
	str))))

Copyright

Copyright (C) Joo ChurlSoo (2004). All Rights Reserved.

This document and translations of it may be copied and furnished to others, and
derivative works that comment on or otherwise explain it or assist in its
implementation may be prepared, copied, published and distributed, in whole or
in part, without restriction of any kind, provided that the above copyright
notice and this paragraph are included on all such copies and derivative works.
However, this document itself may not be modified in any way, such as by
removing the copyright notice or references to the Scheme Request For
Implementation process or editors, except as needed for the purpose of
developing SRFIs in which case the procedures for copyrights defined in the
SRFI process must be followed, or as required to translate it into languages
other than English.

The limited permissions granted above are perpetual and will not be revoked by
the authors or their successors or assigns.

This document and the information contained herein is provided on an "AS IS"
basis and THE AUTHOR AND THE SRFI EDITORS DISCLAIM ALL WARRANTIES, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
