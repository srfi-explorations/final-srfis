(begin
  (define array:opt-args '(mbda (0)))
  (define (array:optimize f r)
    (case r
      (else
       (let ((v
              (do ((k 0 (+ k 1)) (v '() (cons 0 v)))
                  ((= k r) v))))
         (let ((n0 (apply f v)))
           (apply
            array:n
            n0
            (array:coefficients f n0 v v)))))))
  (define (array:optimize-empty r)
    (lambda ks
      (if (= (length? ks) r)
        -1
        (values -1 (car (reverse ks))))))
  (define (array:coefficients f n0 vs vp)
    (case vp
      ((()) '())
      (else
       (set-car! vp 1)
       (let ((n (- (apply f vs) n0)))
         (set-car! vp 0)
         (cons n (array:coefficients f n0 vs (cdr vp)))))))
  (define (array:vector-index x ks) (apply x ks))
  (define (array:shape-index)
    (lambda (r k . o)
      (if (null? o) (+ r r k) (values (+ r r k) (car o)))))
  (define (array:empty-shape-index)
    (lambda (r k . o)
      (if (null? o) -1 (values -1 (car o)))))
  (define (array:shape-vector-index x r k) (x r k))
  (define (array:actor-index x k) (x k))
  (define (array:n n0 . ns)
    (lambda ks
      (do ((ns ns (cdr ns))
           (ks ks (cdr ks))
           (dx (+ n0) (+ dx (* (car ns) (car ks)))))
          ((null? ns)
           (if (null? ks) dx (values dx (car ks)))))))
  (define (array:maker r) (case r (else array:n)))
  (define array:indexer/vector
    (let ((em
           (vector
             (lambda (x i) (x))
             (lambda (x i) (x (vector-ref i 0)))
             (lambda (x i)
               (x (vector-ref i 0) (vector-ref i 1)))
             (lambda (x i)
               (x
                (vector-ref i 0)
                (vector-ref i 1)
                (vector-ref i 2)))
             (lambda (x i)
               (x
                (vector-ref i 0)
                (vector-ref i 1)
                (vector-ref i 2)
                (vector-ref i 3)))
             (lambda (x i)
               (x
                (vector-ref i 0)
                (vector-ref i 1)
                (vector-ref i 2)
                (vector-ref i 3)
                (vector-ref i 4)))
             (lambda (x i)
               (x
                (vector-ref i 0)
                (vector-ref i 1)
                (vector-ref i 2)
                (vector-ref i 3)
                (vector-ref i 4)
                (vector-ref i 5)))
             (lambda (x i)
               (x
                (vector-ref i 0)
                (vector-ref i 1)
                (vector-ref i 2)
                (vector-ref i 3)
                (vector-ref i 4)
                (vector-ref i 5)
                (vector-ref i 6)))
             (lambda (x i)
               (x
                (vector-ref i 0)
                (vector-ref i 1)
                (vector-ref i 2)
                (vector-ref i 3)
                (vector-ref i 4)
                (vector-ref i 5)
                (vector-ref i 6)
                (vector-ref i 7)))
             (lambda (x i)
               (x
                (vector-ref i 0)
                (vector-ref i 1)
                (vector-ref i 2)
                (vector-ref i 3)
                (vector-ref i 4)
                (vector-ref i 5)
                (vector-ref i 6)
                (vector-ref i 7)
                (vector-ref i 8)))))
          (it
           (lambda (w)
             (lambda (x i)
               (apply
                x
                (vector-ref i 0)
                (vector-ref i 1)
                (vector-ref i 2)
                (vector-ref i 3)
                (vector-ref i 4)
                (vector-ref i 5)
                (vector-ref i 6)
                (vector-ref i 7)
                (vector-ref i 8)
                (vector-ref i 9)
                (do ((ks '() (cons (vector-ref i u) ks))
                     (u (- w 1) (- u 1)))
                    ((< u 10) ks)))))))
      (lambda (r) (if (< r 10) (vector-ref em r) (it r)))))
  (define array:indexer/array
    (let ((em
           (vector
             (lambda (x v i) (x))
             (lambda (x v i)
               (x (vector-ref v (array:actor-index i 0))))
             (lambda (x v i)
               (x
                (vector-ref v (array:actor-index i 0))
                (vector-ref v (array:actor-index i 1))))
             (lambda (x v i)
               (x
                (vector-ref v (array:actor-index i 0))
                (vector-ref v (array:actor-index i 1))
                (vector-ref v (array:actor-index i 2))))
             (lambda (x v i)
               (x
                (vector-ref v (array:actor-index i 0))
                (vector-ref v (array:actor-index i 1))
                (vector-ref v (array:actor-index i 2))
                (vector-ref v (array:actor-index i 3))))
             (lambda (x v i)
               (x
                (vector-ref v (array:actor-index i 0))
                (vector-ref v (array:actor-index i 1))
                (vector-ref v (array:actor-index i 2))
                (vector-ref v (array:actor-index i 3))
                (vector-ref v (array:actor-index i 4))))
             (lambda (x v i)
               (x
                (vector-ref v (array:actor-index i 0))
                (vector-ref v (array:actor-index i 1))
                (vector-ref v (array:actor-index i 2))
                (vector-ref v (array:actor-index i 3))
                (vector-ref v (array:actor-index i 4))
                (vector-ref v (array:actor-index i 5))))
             (lambda (x v i)
               (x
                (vector-ref v (array:actor-index i 0))
                (vector-ref v (array:actor-index i 1))
                (vector-ref v (array:actor-index i 2))
                (vector-ref v (array:actor-index i 3))
                (vector-ref v (array:actor-index i 4))
                (vector-ref v (array:actor-index i 5))
                (vector-ref v (array:actor-index i 6))))
             (lambda (x v i)
               (x
                (vector-ref v (array:actor-index i 0))
                (vector-ref v (array:actor-index i 1))
                (vector-ref v (array:actor-index i 2))
                (vector-ref v (array:actor-index i 3))
                (vector-ref v (array:actor-index i 4))
                (vector-ref v (array:actor-index i 5))
                (vector-ref v (array:actor-index i 6))
                (vector-ref v (array:actor-index i 7))))
             (lambda (x v i)
               (x
                (vector-ref v (array:actor-index i 0))
                (vector-ref v (array:actor-index i 1))
                (vector-ref v (array:actor-index i 2))
                (vector-ref v (array:actor-index i 3))
                (vector-ref v (array:actor-index i 4))
                (vector-ref v (array:actor-index i 5))
                (vector-ref v (array:actor-index i 6))
                (vector-ref v (array:actor-index i 7))
                (vector-ref v (array:actor-index i 8))))))
          (it
           (lambda (w)
             (lambda (x v i)
               (apply
                x
                (vector-ref v (array:actor-index i 0))
                (vector-ref v (array:actor-index i 1))
                (vector-ref v (array:actor-index i 2))
                (vector-ref v (array:actor-index i 3))
                (vector-ref v (array:actor-index i 4))
                (vector-ref v (array:actor-index i 5))
                (vector-ref v (array:actor-index i 6))
                (vector-ref v (array:actor-index i 7))
                (vector-ref v (array:actor-index i 8))
                (vector-ref v (array:actor-index i 9))
                (do ((ks
                      '()
                      (cons
                       (vector-ref
                         v
                         (array:actor-index i u))
                       ks))
                     (u (- w 1) (- u 1)))
                    ((< u 10) ks)))))))
      (lambda (r) (if (< r 10) (vector-ref em r) (it r)))))
  (define array:applier-to-vector
    (let ((em
           (vector
             (lambda (p v) (p))
             (lambda (p v) (p (vector-ref v 0)))
             (lambda (p v)
               (p (vector-ref v 0) (vector-ref v 1)))
             (lambda (p v)
               (p
                (vector-ref v 0)
                (vector-ref v 1)
                (vector-ref v 2)))
             (lambda (p v)
               (p
                (vector-ref v 0)
                (vector-ref v 1)
                (vector-ref v 2)
                (vector-ref v 3)))
             (lambda (p v)
               (p
                (vector-ref v 0)
                (vector-ref v 1)
                (vector-ref v 2)
                (vector-ref v 3)
                (vector-ref v 4)))
             (lambda (p v)
               (p
                (vector-ref v 0)
                (vector-ref v 1)
                (vector-ref v 2)
                (vector-ref v 3)
                (vector-ref v 4)
                (vector-ref v 5)))
             (lambda (p v)
               (p
                (vector-ref v 0)
                (vector-ref v 1)
                (vector-ref v 2)
                (vector-ref v 3)
                (vector-ref v 4)
                (vector-ref v 5)
                (vector-ref v 6)))
             (lambda (p v)
               (p
                (vector-ref v 0)
                (vector-ref v 1)
                (vector-ref v 2)
                (vector-ref v 3)
                (vector-ref v 4)
                (vector-ref v 5)
                (vector-ref v 6)
                (vector-ref v 7)))
             (lambda (p v)
               (p
                (vector-ref v 0)
                (vector-ref v 1)
                (vector-ref v 2)
                (vector-ref v 3)
                (vector-ref v 4)
                (vector-ref v 5)
                (vector-ref v 6)
                (vector-ref v 7)
                (vector-ref v 8)))))
          (it
           (lambda (r)
             (lambda (p v)
               (apply
                p
                (vector-ref v 0)
                (vector-ref v 1)
                (vector-ref v 2)
                (vector-ref v 3)
                (vector-ref v 4)
                (vector-ref v 5)
                (vector-ref v 6)
                (vector-ref v 7)
                (vector-ref v 8)
                (vector-ref v 9)
                (do ((k r (- k 1))
                     (r
                      '()
                      (cons (vector-ref v (- k 1)) r)))
                    ((= k 10) r)))))))
      (lambda (r) (if (< r 10) (vector-ref em r) (it r)))))
  (define array:applier-to-actor
    (let ((em
           (vector
             (lambda (p a) (p))
             (lambda (p a) (p (array-ref a 0)))
             (lambda (p a)
               (p (array-ref a 0) (array-ref a 1)))
             (lambda (p a)
               (p
                (array-ref a 0)
                (array-ref a 1)
                (array-ref a 2)))
             (lambda (p a)
               (p
                (array-ref a 0)
                (array-ref a 1)
                (array-ref a 2)
                (array-ref a 3)))
             (lambda (p a)
               (p
                (array-ref a 0)
                (array-ref a 1)
                (array-ref a 2)
                (array-ref a 3)
                (array-ref a 4)))
             (lambda (p a)
               (p
                (array-ref a 0)
                (array-ref a 1)
                (array-ref a 2)
                (array-ref a 3)
                (array-ref a 4)
                (array-ref a 5)))
             (lambda (p a)
               (p
                (array-ref a 0)
                (array-ref a 1)
                (array-ref a 2)
                (array-ref a 3)
                (array-ref a 4)
                (array-ref a 5)
                (array-ref a 6)))
             (lambda (p a)
               (p
                (array-ref a 0)
                (array-ref a 1)
                (array-ref a 2)
                (array-ref a 3)
                (array-ref a 4)
                (array-ref a 5)
                (array-ref a 6)
                (array-ref a 7)))
             (lambda (p a)
               (p
                (array-ref a 0)
                (array-ref a 1)
                (array-ref a 2)
                (array-ref a 3)
                (array-ref a 4)
                (array-ref a 5)
                (array-ref a 6)
                (array-ref a 7)
                (array-ref a 8)))))
          (it
           (lambda (r)
             (lambda (p a)
               (apply
                a
                (array-ref a 0)
                (array-ref a 1)
                (array-ref a 2)
                (array-ref a 3)
                (array-ref a 4)
                (array-ref a 5)
                (array-ref a 6)
                (array-ref a 7)
                (array-ref a 8)
                (array-ref a 9)
                (do ((k r (- k 1))
                     (r '() (cons (array-ref a (- k 1)) r)))
                    ((= k 10) r)))))))
      (lambda (r)
        "These are high level, hiding implementation at call site."
        (if (< r 10) (vector-ref em r) (it r)))))
  (define array:applier-to-backing-vector
    (let ((em
           (vector
             (lambda (p ai av) (p))
             (lambda (p ai av)
               (p (vector-ref av (array:actor-index ai 0))))
             (lambda (p ai av)
               (p
                (vector-ref av (array:actor-index ai 0))
                (vector-ref av (array:actor-index ai 1))))
             (lambda (p ai av)
               (p
                (vector-ref av (array:actor-index ai 0))
                (vector-ref av (array:actor-index ai 1))
                (vector-ref av (array:actor-index ai 2))))
             (lambda (p ai av)
               (p
                (vector-ref av (array:actor-index ai 0))
                (vector-ref av (array:actor-index ai 1))
                (vector-ref av (array:actor-index ai 2))
                (vector-ref av (array:actor-index ai 3))))
             (lambda (p ai av)
               (p
                (vector-ref av (array:actor-index ai 0))
                (vector-ref av (array:actor-index ai 1))
                (vector-ref av (array:actor-index ai 2))
                (vector-ref av (array:actor-index ai 3))
                (vector-ref av (array:actor-index ai 4))))
             (lambda (p ai av)
               (p
                (vector-ref av (array:actor-index ai 0))
                (vector-ref av (array:actor-index ai 1))
                (vector-ref av (array:actor-index ai 2))
                (vector-ref av (array:actor-index ai 3))
                (vector-ref av (array:actor-index ai 4))
                (vector-ref av (array:actor-index ai 5))))
             (lambda (p ai av)
               (p
                (vector-ref av (array:actor-index ai 0))
                (vector-ref av (array:actor-index ai 1))
                (vector-ref av (array:actor-index ai 2))
                (vector-ref av (array:actor-index ai 3))
                (vector-ref av (array:actor-index ai 4))
                (vector-ref av (array:actor-index ai 5))
                (vector-ref av (array:actor-index ai 6))))
             (lambda (p ai av)
               (p
                (vector-ref av (array:actor-index ai 0))
                (vector-ref av (array:actor-index ai 1))
                (vector-ref av (array:actor-index ai 2))
                (vector-ref av (array:actor-index ai 3))
                (vector-ref av (array:actor-index ai 4))
                (vector-ref av (array:actor-index ai 5))
                (vector-ref av (array:actor-index ai 6))
                (vector-ref av (array:actor-index ai 7))))
             (lambda (p ai av)
               (p
                (vector-ref av (array:actor-index ai 0))
                (vector-ref av (array:actor-index ai 1))
                (vector-ref av (array:actor-index ai 2))
                (vector-ref av (array:actor-index ai 3))
                (vector-ref av (array:actor-index ai 4))
                (vector-ref av (array:actor-index ai 5))
                (vector-ref av (array:actor-index ai 6))
                (vector-ref av (array:actor-index ai 7))
                (vector-ref av (array:actor-index ai 8))))))
          (it
           (lambda (r)
             (lambda (p ai av)
               (apply
                p
                (vector-ref av (array:actor-index ai 0))
                (vector-ref av (array:actor-index ai 1))
                (vector-ref av (array:actor-index ai 2))
                (vector-ref av (array:actor-index ai 3))
                (vector-ref av (array:actor-index ai 4))
                (vector-ref av (array:actor-index ai 5))
                (vector-ref av (array:actor-index ai 6))
                (vector-ref av (array:actor-index ai 7))
                (vector-ref av (array:actor-index ai 8))
                (vector-ref av (array:actor-index ai 9))
                (do ((k r (- k 1))
                     (r
                      '()
                      (cons
                       (vector-ref
                         av
                         (array:actor-index ai (- k 1)))
                       r)))
                    ((= k 10) r)))))))
      (lambda (r)
        "These are low level, exposing implementation at call site."
        (if (< r 10) (vector-ref em r) (it r)))))
  (define (array:index/vector r x v)
    ((array:indexer/vector r) x v))
  (define (array:index/array r x av ai)
    ((array:indexer/array r) x av ai))
  (define (array:apply-to-vector r p v)
    ((array:applier-to-vector r) p v))
  (define (array:apply-to-actor r p a)
    ((array:applier-to-actor r) p a)))
